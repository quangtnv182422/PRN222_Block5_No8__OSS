@using OSS_Main.Models.Entity
@model List<Feedback>
@{
    var totalPages = ViewBag.TotalPages as int? ?? 1;
    var currentPage = ViewBag.CurrentPage as int? ?? 1;
    var sort = ViewBag.Sort as string ?? "newest";
    var productId = ViewBag.ProductId as int? ?? 0;
    var currentCustomerId = ViewBag.CurrentCustomerId as string ?? "";
}
@Html.AntiForgeryToken()

<style>
    .pagination {
        display: flex;
        flex-wrap: nowrap;
        overflow-x: auto;
    }

    button, [type=button], [type=reset], [type=submit] {
        -webkit-appearance: button;
        height: 40px;
    }
   
}

</style>
@if (!Model.Any())
{
    <p>No reviews yet. Be the first to leave one!</p>
}
else
{
    foreach (var fb in Model)
    {
         <div class=" mb-4 border-bottom pb-3">
        <div class="d-flex mb-4 pb-3">
            <img src="~/img/avatar.jpg" class="img-fluid rounded-circle me-3" style="width: 80px; height: 80px;" alt="Avatar" />
            <div>
                <div class="d-flex justify-content-between">
                    <h5 class="mb-1 me-auto">@fb.Customer?.UserName</h5>
                    <small class="text-muted">@fb.CreatedAt.ToString("dd MMM yyyy")</small>
                </div>
                <div class="mb-2">
                    @for (int i = 1; i <= 5; i++)
                    {
                        if (i <= fb.RatedStar)
                        {
                            <i class="fa fa-star text-warning"></i>
                        }
                        else
                        {
                            <i class="fa fa-star text-silver"></i>
                        }
                    }
                </div>
                <p class="mb-2">@fb.FeedbackContent</p>

                @if (fb.Medias != null && fb.Medias.Any(m => m.MediaType == MediaType.Image))
                {
                    <div class="d-flex flex-wrap">
                        @foreach (var media in fb.Medias.Where(m => m.MediaType == MediaType.Image))
                        {
                            <img src="@media.Url" class="img-thumbnail me-2 mb-2" style="width: 120px;" alt="Feedback Image" />
                        }
                    </div>
                }
            </div>
           


        </div>
        @if (fb.CustomerId == ViewBag.CurrentCustomerId as string)
        {
            <div class="feedback-actions d-flex gap-2">
                <button class="btn btn-sm btn-outline-primary" onclick="openEditModal('@fb.FeedbackId')">Edit</button>

                <form action="/Products/DeleteFeedback2" method="post" class="feedback-form d-flex align-items-center p-0 m-0">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@fb.FeedbackId" />
                    <input type="hidden" name="productId" value="@ViewBag.ProductId" />
                    <input type="hidden" name="specId" value="@ViewBag.SelectedSpecId" />
                    <input type="hidden" name="currentPage" value="@ViewBag.CurrentPage" />
                    <input type="hidden" name="sort" value="@ViewBag.Sort" />
                    <button type="submit" class="btn btn-sm btn-outline-danger">Delete</button>
                </form>
            </div>

        }
        </div>
    }
    <nav class="mt-3">
        <ul class="pagination justify-content-center">
            @for (int i = 1; i <= totalPages; i++)
            {
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <button class="page-link" onclick="loadFeedbackPage(@productId, '@sort', @i)">@i</button>
                </li>
            }
        </ul>
    </nav>
}
<!-- Edit Feedback Modal -->
<div class="modal fade" id="editFeedbackModal" tabindex="-1" aria-labelledby="editFeedbackModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editFeedbackModalLabel">Edit Feedback</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="editFeedbackId" />
                <div class="mb-3">
                    <label for="editFeedbackContent" class="form-label">Content</label>
                    <textarea id="editFeedbackContent" class="form-control" rows="3"></textarea>
                </div>
                <div class="mb-3">
                    <label for="editFeedbackStar" class="form-label">Rating</label>
                    <select id="editFeedbackStar" class="form-select">
                        @for (int i = 1; i <= 5; i++)
                        {
                            <option value="@i">@i Star</option>
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button class="btn btn-primary" onclick="submitEditFeedback()">Save</button>
            </div>
        </div>
    </div>
</div>


<script>
    function loadFeedbackPage(productId, sort, page) {
        fetch(`/Products/GetSortedFeedback?productId=${productId}&sort=${sort}&page=${page}`)
            .then(res => res.text())
            .then(html => {
                document.getElementById('feedback-container').innerHTML = html;
            });
    }

    document.getElementById('sortSelect').addEventListener('change', function () {
        const sort = this.value;
        const productId = '@productId';
        loadFeedbackPage(productId, sort, 1); // reset về trang 1 khi đổi sort
    });

                function deleteFeedback(feedbackId, button) {
        // Kiểm tra feedbackId
        if (!feedbackId || isNaN(feedbackId) || feedbackId <= 0) {
            alert("ID Feedback không hợp lệ.");
            console.error("Invalid feedbackId:", feedbackId);
            return;
        }

        // Xác nhận xóa
        if (!confirm("Bạn có chắc chắn muốn xoá đánh giá này không?")) {
            return;
        }

        // Vô hiệu hóa nút và hiển thị trạng thái loading
        const originalButtonContent = button.innerHTML;
        button.disabled = true;
        button.innerHTML = "Đang xóa...";
        console.log("Sending request to delete feedback ID:", feedbackId);

        // Tạo FormData để gửi id
        const formData = new FormData();
        formData.append("id", feedbackId);

        // Gửi request với Fetch API
        fetch('/AdminFeedback/DeleteFeedback2', {
            method: 'POST',
            body: formData
        })
            .then(response => {
                console.log("Response status:", response.status);
                const contentType = response.headers.get("content-type");
                console.log("Content-Type:", contentType);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                if (!contentType || !contentType.includes("application/json")) {
                    return response.text().then(text => {
                        console.log("Raw response:", text.slice(0, 200)); // In 200 ký tự đầu
                        throw new Error("Response is not JSON, received HTML or other content");
                    });
                }
                return response.json();
            })
            .then(data => {
                console.log("Response data:", data);
                if (data.success) {
                    alert(data.message);
                    // Xóa hàng chứa feedback với hiệu ứng fade-out
                    const row = button.closest('tr');
                    if (row) {
                        row.style.transition = 'opacity 0.3s';
                        row.style.opacity = '0';
                        setTimeout(() => row.remove(), 300);
                    } else {
                        console.warn("Parent row not found, reloading page");
                        location.reload();
                    }
                } else {
                    alert("Xoá thất bại: " + (data.message || "Lỗi không xác định"));
                }
            })
            .catch(error => {
                console.error("Lỗi khi xóa Feedback:", error);
                alert("Đã xảy ra lỗi khi xóa Feedback: " + error.message);
            })
            .finally(() => {
                // Khôi phục nút
                button.disabled = false;
                button.innerHTML = originalButtonContent;
            });
    }
    
     document.addEventListener("DOMContentLoaded", function () {
        const modalElement = document.getElementById('editFeedbackModal');
        const modal = new bootstrap.Modal(modalElement);

        window.openEditModal = function (feedbackId) {
            fetch(`/Products/GetFeedback/${feedbackId}`)
                .then(res => res.json())
                .then(data => {
                    document.getElementById('editFeedbackId').value = data.feedbackId;
                    document.getElementById('editFeedbackContent').value = data.feedbackContent;
                    document.getElementById('editFeedbackStar').value = data.ratedStar;
                    modal.show();
                });
        }

        window.submitEditFeedback = function () {
            const feedbackId = document.getElementById('editFeedbackId').value;
            const content = document.getElementById('editFeedbackContent').value;
            const star = document.getElementById('editFeedbackStar').value;

            fetch(`/Products/EditFeedback/${feedbackId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: JSON.stringify({
                    FeedbackContent: content,
                    RatedStar: parseInt(star)
                })
            })
            .then(res => {
                if (res.ok) {
                    modal.hide();
                    location.reload(); // hoặc gọi lại AJAX nếu có
                } else {
                    alert("Error updating feedback");
                }
            });
        }
    });
</script>



